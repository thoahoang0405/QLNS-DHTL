{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\nconst {\n  validate\n} = require(\"schema-utils\");\nconst serialize = require(\"serialize-javascript\");\nconst {\n  Worker\n} = require(\"jest-worker\");\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\nconst schema = require(\"./options.json\");\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\r\n * @callback ExtractCommentsFunction\r\n * @param {any} astNode\r\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\r\n * @returns {boolean}\r\n */\n\n/**\r\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\r\n */\n\n/**\r\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\r\n */\n\n/**\r\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\r\n */\n\n/**\r\n * @typedef {Object} ExtractCommentsObject\r\n * @property {ExtractCommentsCondition} [condition]\r\n * @property {ExtractCommentsFilename} [filename]\r\n * @property {ExtractCommentsBanner} [banner]\r\n */\n\n/**\r\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\r\n */\n\n/**\r\n * @typedef {Object} MinimizedResult\r\n * @property {string} code\r\n * @property {SourceMapInput} [map]\r\n * @property {Array<Error | string>} [errors]\r\n * @property {Array<Error | string>} [warnings]\r\n * @property {Array<string>} [extractedComments]\r\n */\n\n/**\r\n * @typedef {{ [file: string]: string }} Input\r\n */\n\n/**\r\n * @typedef {{ [key: string]: any }} CustomOptions\r\n */\n\n/**\r\n * @template T\r\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\r\n */\n\n/**\r\n * @typedef {Object} PredefinedOptions\r\n * @property {boolean} [module]\r\n * @property {TerserECMA} [ecma]\r\n */\n\n/**\r\n * @template T\r\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\r\n */\n\n/**\r\n * @template T\r\n * @callback BasicMinimizerImplementation\r\n * @param {Input} input\r\n * @param {SourceMapInput | undefined} sourceMap\r\n * @param {MinimizerOptions<T>} minifyOptions\r\n * @param {ExtractCommentsOptions | undefined} extractComments\r\n * @returns {Promise<MinimizedResult>}\r\n */\n\n/**\r\n * @typedef {object} MinimizeFunctionHelpers\r\n * @property {() => string | undefined} [getMinimizerVersion]\r\n */\n\n/**\r\n * @template T\r\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\r\n */\n\n/**\r\n * @template T\r\n * @typedef {Object} InternalOptions\r\n * @property {string} name\r\n * @property {string} input\r\n * @property {SourceMapInput | undefined} inputSourceMap\r\n * @property {ExtractCommentsOptions | undefined} extractComments\r\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\r\n */\n\n/**\r\n * @template T\r\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\r\n */\n\n/**\r\n * @typedef {undefined | boolean | number} Parallel\r\n */\n\n/**\r\n * @typedef {Object} BasePluginOptions\r\n * @property {Rules} [test]\r\n * @property {Rules} [include]\r\n * @property {Rules} [exclude]\r\n * @property {ExtractCommentsOptions} [extractComments]\r\n * @property {Parallel} [parallel]\r\n */\n\n/**\r\n * @template T\r\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\r\n */\n\n/**\r\n * @template T\r\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\r\n */\n\n/**\r\n * @template [T=TerserOptions]\r\n */\n\nclass TerserPlugin {\n  /**\r\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\r\n   */\n  constructor(options) {\n    validate( /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify = /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions = /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\r\n     * @private\r\n     * @type {InternalPluginOptions<T>}\r\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\r\n   * @private\r\n   * @param {any} input\r\n   * @returns {boolean}\r\n   */\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\r\n   * @private\r\n   * @param {unknown} warning\r\n   * @param {string} file\r\n   * @returns {Error}\r\n   */\n\n  static buildWarning(warning, file) {\n    /**\r\n     * @type {Error & { hideStack: true, file: string }}\r\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\r\n   * @private\r\n   * @param {any} error\r\n   * @param {string} file\r\n   * @param {TraceMap} [sourceMap]\r\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\r\n   * @returns {Error}\r\n   */\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\r\n     * @type {Error & { file?: string }}\r\n     */\n    let builtError;\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\r\n   * @private\r\n   * @param {Parallel} parallel\r\n   * @returns {number}\r\n   */\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\r\n   * @private\r\n   * @param {Compiler} compiler\r\n   * @param {Compilation} compilation\r\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\r\n   * @param {{availableNumberOfCores: number}} optimizeOptions\r\n   * @returns {Promise<void>}\r\n   */\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } = /** @type {Asset} */\n      compilation.getAsset(name);\n      if (\n      // Skip double minimize assets from child compilation\n      info.minimized ||\n      // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n      // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } = /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n      if (!output) {\n        numberOfAssets += 1;\n      }\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n        initializedWorker = /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n        const workerStderr = initializedWorker.getStderr();\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n        return initializedWorker;\n      };\n    }\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push( /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap = /** @type {SourceMapInput} */\n              map;\n            }\n          }\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\r\n           * @type {InternalOptions<T>}\r\n           */\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: {\n                ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push( /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n            inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push( /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\r\n             * @param {Error | string} item\r\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\r\n             * @param {Error | string} item\r\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n            inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n          let shebang;\n          if ( /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename = /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if ( /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner = /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push( /** @type {WebpackError} */\n            warning);\n          }\n        }\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push( /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n    const limit = getWorker && numberOfAssets > 0 ? /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\r\n     * @param {Promise<unknown>} previousPromise\r\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\r\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\r\n     */\n    async (previousPromise, [from, value]) => {\n      const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([... /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ... /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n      const existingAsset = compilation.getAsset(commentsFilename);\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    }, /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\r\n   * @private\r\n   * @param {any} environment\r\n   * @returns {TerserECMA}\r\n   */\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n    return 5;\n  }\n  /**\r\n   * @param {Compiler} compiler\r\n   * @returns {void}\r\n   */\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ? /** @type {Function} */\n        green( /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n}\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"names":["require","path","os","TraceMap","originalPositionFor","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","green","formatFlag","exports"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/terser-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst path = require(\"path\");\r\n\r\nconst os = require(\"os\");\r\n\r\nconst {\r\n  TraceMap,\r\n  originalPositionFor\r\n} = require(\"@jridgewell/trace-mapping\");\r\n\r\nconst {\r\n  validate\r\n} = require(\"schema-utils\");\r\n\r\nconst serialize = require(\"serialize-javascript\");\r\n\r\nconst {\r\n  Worker\r\n} = require(\"jest-worker\");\r\n\r\nconst {\r\n  throttleAll,\r\n  terserMinify,\r\n  uglifyJsMinify,\r\n  swcMinify,\r\n  esbuildMinify\r\n} = require(\"./utils\");\r\n\r\nconst schema = require(\"./options.json\");\r\n\r\nconst {\r\n  minify\r\n} = require(\"./minify\");\r\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\r\n\r\n/** @typedef {import(\"webpack\").Compiler} Compiler */\r\n\r\n/** @typedef {import(\"webpack\").Compilation} Compilation */\r\n\r\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\r\n\r\n/** @typedef {import(\"webpack\").Asset} Asset */\r\n\r\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\r\n\r\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\r\n\r\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\r\n\r\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\r\n\r\n/** @typedef {RegExp | string} Rule */\r\n\r\n/** @typedef {Rule[] | Rule} Rules */\r\n\r\n/**\r\n * @callback ExtractCommentsFunction\r\n * @param {any} astNode\r\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\r\n * @returns {boolean}\r\n */\r\n\r\n/**\r\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\r\n */\r\n\r\n/**\r\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\r\n */\r\n\r\n/**\r\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\r\n */\r\n\r\n/**\r\n * @typedef {Object} ExtractCommentsObject\r\n * @property {ExtractCommentsCondition} [condition]\r\n * @property {ExtractCommentsFilename} [filename]\r\n * @property {ExtractCommentsBanner} [banner]\r\n */\r\n\r\n/**\r\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\r\n */\r\n\r\n/**\r\n * @typedef {Object} MinimizedResult\r\n * @property {string} code\r\n * @property {SourceMapInput} [map]\r\n * @property {Array<Error | string>} [errors]\r\n * @property {Array<Error | string>} [warnings]\r\n * @property {Array<string>} [extractedComments]\r\n */\r\n\r\n/**\r\n * @typedef {{ [file: string]: string }} Input\r\n */\r\n\r\n/**\r\n * @typedef {{ [key: string]: any }} CustomOptions\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\r\n */\r\n\r\n/**\r\n * @typedef {Object} PredefinedOptions\r\n * @property {boolean} [module]\r\n * @property {TerserECMA} [ecma]\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\r\n */\r\n\r\n/**\r\n * @template T\r\n * @callback BasicMinimizerImplementation\r\n * @param {Input} input\r\n * @param {SourceMapInput | undefined} sourceMap\r\n * @param {MinimizerOptions<T>} minifyOptions\r\n * @param {ExtractCommentsOptions | undefined} extractComments\r\n * @returns {Promise<MinimizedResult>}\r\n */\r\n\r\n/**\r\n * @typedef {object} MinimizeFunctionHelpers\r\n * @property {() => string | undefined} [getMinimizerVersion]\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {Object} InternalOptions\r\n * @property {string} name\r\n * @property {string} input\r\n * @property {SourceMapInput | undefined} inputSourceMap\r\n * @property {ExtractCommentsOptions | undefined} extractComments\r\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\r\n */\r\n\r\n/**\r\n * @typedef {undefined | boolean | number} Parallel\r\n */\r\n\r\n/**\r\n * @typedef {Object} BasePluginOptions\r\n * @property {Rules} [test]\r\n * @property {Rules} [include]\r\n * @property {Rules} [exclude]\r\n * @property {ExtractCommentsOptions} [extractComments]\r\n * @property {Parallel} [parallel]\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\r\n */\r\n\r\n/**\r\n * @template [T=TerserOptions]\r\n */\r\n\r\n\r\nclass TerserPlugin {\r\n  /**\r\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\r\n   */\r\n  constructor(options) {\r\n    validate(\r\n    /** @type {Schema} */\r\n    schema, options || {}, {\r\n      name: \"Terser Plugin\",\r\n      baseDataPath: \"options\"\r\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\r\n\r\n    const {\r\n      minify =\r\n      /** @type {MinimizerImplementation<T>} */\r\n      terserMinify,\r\n      terserOptions =\r\n      /** @type {MinimizerOptions<T>} */\r\n      {},\r\n      test = /\\.[cm]?js(\\?.*)?$/i,\r\n      extractComments = true,\r\n      parallel = true,\r\n      include,\r\n      exclude\r\n    } = options || {};\r\n    /**\r\n     * @private\r\n     * @type {InternalPluginOptions<T>}\r\n     */\r\n\r\n    this.options = {\r\n      test,\r\n      extractComments,\r\n      parallel,\r\n      include,\r\n      exclude,\r\n      minimizer: {\r\n        implementation: minify,\r\n        options: terserOptions\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {any} input\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  static isSourceMap(input) {\r\n    // All required options for `new TraceMap(...options)`\r\n    // https://github.com/jridgewell/trace-mapping#usage\r\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {unknown} warning\r\n   * @param {string} file\r\n   * @returns {Error}\r\n   */\r\n\r\n\r\n  static buildWarning(warning, file) {\r\n    /**\r\n     * @type {Error & { hideStack: true, file: string }}\r\n     */\r\n    // @ts-ignore\r\n    const builtWarning = new Error(warning.toString());\r\n    builtWarning.name = \"Warning\";\r\n    builtWarning.hideStack = true;\r\n    builtWarning.file = file;\r\n    return builtWarning;\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {any} error\r\n   * @param {string} file\r\n   * @param {TraceMap} [sourceMap]\r\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\r\n   * @returns {Error}\r\n   */\r\n\r\n\r\n  static buildError(error, file, sourceMap, requestShortener) {\r\n    /**\r\n     * @type {Error & { file?: string }}\r\n     */\r\n    let builtError;\r\n\r\n    if (typeof error === \"string\") {\r\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\r\n      builtError.file = file;\r\n      return builtError;\r\n    }\r\n\r\n    if (error.line) {\r\n      const original = sourceMap && originalPositionFor(sourceMap, {\r\n        line: error.line,\r\n        column: error.col\r\n      });\r\n\r\n      if (original && original.source && requestShortener) {\r\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\r\n        builtError.file = file;\r\n        return builtError;\r\n      }\r\n\r\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\r\n      builtError.file = file;\r\n      return builtError;\r\n    }\r\n\r\n    if (error.stack) {\r\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\r\n      builtError.file = file;\r\n      return builtError;\r\n    }\r\n\r\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\r\n    builtError.file = file;\r\n    return builtError;\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {Parallel} parallel\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  static getAvailableNumberOfCores(parallel) {\r\n    // In some cases cpus() returns undefined\r\n    // https://github.com/nodejs/node/issues/19022\r\n    const cpus = os.cpus() || {\r\n      length: 1\r\n    };\r\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {Compiler} compiler\r\n   * @param {Compilation} compilation\r\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\r\n   * @param {{availableNumberOfCores: number}} optimizeOptions\r\n   * @returns {Promise<void>}\r\n   */\r\n\r\n\r\n  async optimize(compiler, compilation, assets, optimizeOptions) {\r\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\r\n    let numberOfAssets = 0;\r\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\r\n      const {\r\n        info\r\n      } =\r\n      /** @type {Asset} */\r\n      compilation.getAsset(name);\r\n\r\n      if ( // Skip double minimize assets from child compilation\r\n      info.minimized || // Skip minimizing for extracted comments assets\r\n      info.extractedComments) {\r\n        return false;\r\n      }\r\n\r\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\r\n      undefined, this.options)(name)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }).map(async name => {\r\n      const {\r\n        info,\r\n        source\r\n      } =\r\n      /** @type {Asset} */\r\n      compilation.getAsset(name);\r\n      const eTag = cache.getLazyHashedEtag(source);\r\n      const cacheItem = cache.getItemCache(name, eTag);\r\n      const output = await cacheItem.getPromise();\r\n\r\n      if (!output) {\r\n        numberOfAssets += 1;\r\n      }\r\n\r\n      return {\r\n        name,\r\n        info,\r\n        inputSource: source,\r\n        output,\r\n        cacheItem\r\n      };\r\n    }));\r\n\r\n    if (assetsForMinify.length === 0) {\r\n      return;\r\n    }\r\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\r\n\r\n\r\n    let getWorker;\r\n    /** @type {undefined | MinimizerWorker<T>} */\r\n\r\n    let initializedWorker;\r\n    /** @type {undefined | number} */\r\n\r\n    let numberOfWorkers;\r\n\r\n    if (optimizeOptions.availableNumberOfCores > 0) {\r\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\r\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\r\n\r\n      getWorker = () => {\r\n        if (initializedWorker) {\r\n          return initializedWorker;\r\n        }\r\n\r\n        initializedWorker =\r\n        /** @type {MinimizerWorker<T>} */\r\n        new Worker(require.resolve(\"./minify\"), {\r\n          numWorkers: numberOfWorkers,\r\n          enableWorkerThreads: true\r\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\r\n\r\n        const workerStdout = initializedWorker.getStdout();\r\n\r\n        if (workerStdout) {\r\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\r\n        }\r\n\r\n        const workerStderr = initializedWorker.getStderr();\r\n\r\n        if (workerStderr) {\r\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\r\n        }\r\n\r\n        return initializedWorker;\r\n      };\r\n    }\r\n\r\n    const {\r\n      SourceMapSource,\r\n      ConcatSource,\r\n      RawSource\r\n    } = compiler.webpack.sources;\r\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\r\n\r\n    /** @type {Map<string, ExtractedCommentsInfo>} */\r\n\r\n    const allExtractedComments = new Map();\r\n    const scheduledTasks = [];\r\n\r\n    for (const asset of assetsForMinify) {\r\n      scheduledTasks.push(async () => {\r\n        const {\r\n          name,\r\n          inputSource,\r\n          info,\r\n          cacheItem\r\n        } = asset;\r\n        let {\r\n          output\r\n        } = asset;\r\n\r\n        if (!output) {\r\n          let input;\r\n          /** @type {SourceMapInput | undefined} */\r\n\r\n          let inputSourceMap;\r\n          const {\r\n            source: sourceFromInputSource,\r\n            map\r\n          } = inputSource.sourceAndMap();\r\n          input = sourceFromInputSource;\r\n\r\n          if (map) {\r\n            if (!TerserPlugin.isSourceMap(map)) {\r\n              compilation.warnings.push(\r\n              /** @type {WebpackError} */\r\n              new Error(`${name} contains invalid source map`));\r\n            } else {\r\n              inputSourceMap =\r\n              /** @type {SourceMapInput} */\r\n              map;\r\n            }\r\n          }\r\n\r\n          if (Buffer.isBuffer(input)) {\r\n            input = input.toString();\r\n          }\r\n          /**\r\n           * @type {InternalOptions<T>}\r\n           */\r\n\r\n\r\n          const options = {\r\n            name,\r\n            input,\r\n            inputSourceMap,\r\n            minimizer: {\r\n              implementation: this.options.minimizer.implementation,\r\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\r\n              options: { ...this.options.minimizer.options\r\n              }\r\n            },\r\n            extractComments: this.options.extractComments\r\n          };\r\n\r\n          if (typeof options.minimizer.options.module === \"undefined\") {\r\n            if (typeof info.javascriptModule !== \"undefined\") {\r\n              options.minimizer.options.module = info.javascriptModule;\r\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\r\n              options.minimizer.options.module = true;\r\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\r\n              options.minimizer.options.module = false;\r\n            }\r\n          }\r\n\r\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\r\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\r\n          }\r\n\r\n          try {\r\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\r\n          } catch (error) {\r\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\r\n            compilation.errors.push(\r\n            /** @type {WebpackError} */\r\n            TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap(\r\n            /** @type {SourceMapInput} */\r\n            inputSourceMap) : // eslint-disable-next-line no-undefined\r\n            undefined, // eslint-disable-next-line no-undefined\r\n            hasSourceMap ? compilation.requestShortener : undefined));\r\n            return;\r\n          }\r\n\r\n          if (typeof output.code === \"undefined\") {\r\n            compilation.errors.push(\r\n            /** @type {WebpackError} */\r\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\r\n            return;\r\n          }\r\n\r\n          if (output.warnings && output.warnings.length > 0) {\r\n            output.warnings = output.warnings.map(\r\n            /**\r\n             * @param {Error | string} item\r\n             */\r\n            item => TerserPlugin.buildWarning(item, name));\r\n          }\r\n\r\n          if (output.errors && output.errors.length > 0) {\r\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\r\n            output.errors = output.errors.map(\r\n            /**\r\n             * @param {Error | string} item\r\n             */\r\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap(\r\n            /** @type {SourceMapInput} */\r\n            inputSourceMap) : // eslint-disable-next-line no-undefined\r\n            undefined, // eslint-disable-next-line no-undefined\r\n            hasSourceMap ? compilation.requestShortener : undefined));\r\n          }\r\n\r\n          let shebang;\r\n\r\n          if (\r\n          /** @type {ExtractCommentsObject} */\r\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\r\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\r\n            shebang = output.code.substring(0, firstNewlinePosition);\r\n            output.code = output.code.substring(firstNewlinePosition + 1);\r\n          }\r\n\r\n          if (output.map) {\r\n            output.source = new SourceMapSource(output.code, name, output.map, input,\r\n            /** @type {SourceMapInput} */\r\n            inputSourceMap, true);\r\n          } else {\r\n            output.source = new RawSource(output.code);\r\n          }\r\n\r\n          if (output.extractedComments && output.extractedComments.length > 0) {\r\n            const commentsFilename =\r\n            /** @type {ExtractCommentsObject} */\r\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\r\n            let query = \"\";\r\n            let filename = name;\r\n            const querySplit = filename.indexOf(\"?\");\r\n\r\n            if (querySplit >= 0) {\r\n              query = filename.slice(querySplit);\r\n              filename = filename.slice(0, querySplit);\r\n            }\r\n\r\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\r\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\r\n            const data = {\r\n              filename,\r\n              basename,\r\n              query\r\n            };\r\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\r\n            let banner; // Add a banner to the original file\r\n\r\n            if (\r\n            /** @type {ExtractCommentsObject} */\r\n            this.options.extractComments.banner !== false) {\r\n              banner =\r\n              /** @type {ExtractCommentsObject} */\r\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\r\n\r\n              if (typeof banner === \"function\") {\r\n                banner = banner(output.commentsFilename);\r\n              }\r\n\r\n              if (banner) {\r\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\r\n              }\r\n            }\r\n\r\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\r\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\r\n          }\r\n\r\n          await cacheItem.storePromise({\r\n            source: output.source,\r\n            errors: output.errors,\r\n            warnings: output.warnings,\r\n            commentsFilename: output.commentsFilename,\r\n            extractedCommentsSource: output.extractedCommentsSource\r\n          });\r\n        }\r\n\r\n        if (output.warnings && output.warnings.length > 0) {\r\n          for (const warning of output.warnings) {\r\n            compilation.warnings.push(\r\n            /** @type {WebpackError} */\r\n            warning);\r\n          }\r\n        }\r\n\r\n        if (output.errors && output.errors.length > 0) {\r\n          for (const error of output.errors) {\r\n            compilation.errors.push(\r\n            /** @type {WebpackError} */\r\n            error);\r\n          }\r\n        }\r\n        /** @type {Record<string, any>} */\r\n\r\n\r\n        const newInfo = {\r\n          minimized: true\r\n        };\r\n        const {\r\n          source,\r\n          extractedCommentsSource\r\n        } = output; // Write extracted comments to commentsFilename\r\n\r\n        if (extractedCommentsSource) {\r\n          const {\r\n            commentsFilename\r\n          } = output;\r\n          newInfo.related = {\r\n            license: commentsFilename\r\n          };\r\n          allExtractedComments.set(name, {\r\n            extractedCommentsSource,\r\n            commentsFilename\r\n          });\r\n        }\r\n\r\n        compilation.updateAsset(name, source, newInfo);\r\n      });\r\n    }\r\n\r\n    const limit = getWorker && numberOfAssets > 0 ?\r\n    /** @type {number} */\r\n    numberOfWorkers : scheduledTasks.length;\r\n    await throttleAll(limit, scheduledTasks);\r\n\r\n    if (initializedWorker) {\r\n      await initializedWorker.end();\r\n    }\r\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\r\n\r\n\r\n    await Array.from(allExtractedComments).sort().reduce(\r\n    /**\r\n     * @param {Promise<unknown>} previousPromise\r\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\r\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\r\n     */\r\n    async (previousPromise, [from, value]) => {\r\n      const previous =\r\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\r\n      await previousPromise;\r\n      const {\r\n        commentsFilename,\r\n        extractedCommentsSource\r\n      } = value;\r\n\r\n      if (previous && previous.commentsFilename === commentsFilename) {\r\n        const {\r\n          from: previousFrom,\r\n          source: prevSource\r\n        } = previous;\r\n        const mergedName = `${previousFrom}|${from}`;\r\n        const name = `${commentsFilename}|${mergedName}`;\r\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\r\n        let source = await cache.getPromise(name, eTag);\r\n\r\n        if (!source) {\r\n          source = new ConcatSource(Array.from(new Set([...\r\n          /** @type {string}*/\r\n          prevSource.source().split(\"\\n\\n\"), ...\r\n          /** @type {string}*/\r\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\r\n          await cache.storePromise(name, eTag, source);\r\n        }\r\n\r\n        compilation.updateAsset(commentsFilename, source);\r\n        return {\r\n          source,\r\n          commentsFilename,\r\n          from: mergedName\r\n        };\r\n      }\r\n\r\n      const existingAsset = compilation.getAsset(commentsFilename);\r\n\r\n      if (existingAsset) {\r\n        return {\r\n          source: existingAsset.source,\r\n          commentsFilename,\r\n          from: commentsFilename\r\n        };\r\n      }\r\n\r\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\r\n        extractedComments: true\r\n      });\r\n      return {\r\n        source: extractedCommentsSource,\r\n        commentsFilename,\r\n        from\r\n      };\r\n    },\r\n    /** @type {Promise<unknown>} */\r\n    Promise.resolve());\r\n  }\r\n  /**\r\n   * @private\r\n   * @param {any} environment\r\n   * @returns {TerserECMA}\r\n   */\r\n\r\n\r\n  static getEcmaVersion(environment) {\r\n    // ES 6th\r\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\r\n      return 2015;\r\n    } // ES 11th\r\n\r\n\r\n    if (environment.bigIntLiteral || environment.dynamicImport) {\r\n      return 2020;\r\n    }\r\n\r\n    return 5;\r\n  }\r\n  /**\r\n   * @param {Compiler} compiler\r\n   * @returns {void}\r\n   */\r\n\r\n\r\n  apply(compiler) {\r\n    const pluginName = this.constructor.name;\r\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\r\n    compiler.hooks.compilation.tap(pluginName, compilation => {\r\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\r\n      const data = serialize({\r\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\r\n        options: this.options.minimizer.options\r\n      });\r\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\r\n        hash.update(\"TerserPlugin\");\r\n        hash.update(data);\r\n      });\r\n      compilation.hooks.processAssets.tapPromise({\r\n        name: pluginName,\r\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\r\n        additionalAssets: true\r\n      }, assets => this.optimize(compiler, compilation, assets, {\r\n        availableNumberOfCores\r\n      }));\r\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\r\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\r\n          green,\r\n          formatFlag\r\n        }) => minimized ?\r\n        /** @type {Function} */\r\n        green(\r\n        /** @type {Function} */\r\n        formatFlag(\"minimized\")) : \"\");\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\nTerserPlugin.terserMinify = terserMinify;\r\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\r\nTerserPlugin.swcMinify = swcMinify;\r\nTerserPlugin.esbuildMinify = esbuildMinify;\r\nmodule.exports = TerserPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
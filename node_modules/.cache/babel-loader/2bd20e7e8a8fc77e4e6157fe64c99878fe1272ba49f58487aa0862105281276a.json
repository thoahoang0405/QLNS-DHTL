{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nmodule.exports = class ParsePlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {Partial<ResolveRequest>} requestOptions request options\r\n   * @param {string | ResolveStepHook} target target\r\n   */\n  constructor(source, requestOptions, target) {\n    this.source = source;\n    this.requestOptions = requestOptions;\n    this.target = target;\n  }\n\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ParsePlugin\", (request, resolveContext, callback) => {\n      const parsed = resolver.parse( /** @type {string} */request.request);\n      const obj = {\n        ...request,\n        ...parsed,\n        ...this.requestOptions\n      };\n      if (request.query && !parsed.query) {\n        obj.query = request.query;\n      }\n      if (request.fragment && !parsed.fragment) {\n        obj.fragment = request.fragment;\n      }\n      if (parsed && resolveContext.log) {\n        if (parsed.module) resolveContext.log(\"Parsed request is a module\");\n        if (parsed.directory) resolveContext.log(\"Parsed request is a directory\");\n      }\n      // There is an edge-case where a request with # can be a path or a fragment -> try both\n      if (obj.request && !obj.query && obj.fragment) {\n        const directory = obj.fragment.endsWith(\"/\");\n        const alternative = {\n          ...obj,\n          directory,\n          request: obj.request + (obj.directory ? \"/\" : \"\") + (directory ? obj.fragment.slice(0, -1) : obj.fragment),\n          fragment: \"\"\n        };\n        resolver.doResolve(target, alternative, null, resolveContext, (err, result) => {\n          if (err) return callback(err);\n          if (result) return callback(null, result);\n          resolver.doResolve(target, obj, null, resolveContext, callback);\n        });\n        return;\n      }\n      resolver.doResolve(target, obj, null, resolveContext, callback);\n    });\n  }\n};","map":{"version":3,"names":["module","exports","ParsePlugin","constructor","source","requestOptions","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","parsed","parse","obj","query","fragment","log","directory","endsWith","alternative","slice","doResolve","err","result"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/enhanced-resolve/lib/ParsePlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n\r\nmodule.exports = class ParsePlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {Partial<ResolveRequest>} requestOptions request options\r\n\t * @param {string | ResolveStepHook} target target\r\n\t */\r\n\tconstructor(source, requestOptions, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.requestOptions = requestOptions;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"ParsePlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\tconst parsed = resolver.parse(/** @type {string} */ (request.request));\r\n\t\t\t\tconst obj = { ...request, ...parsed, ...this.requestOptions };\r\n\t\t\t\tif (request.query && !parsed.query) {\r\n\t\t\t\t\tobj.query = request.query;\r\n\t\t\t\t}\r\n\t\t\t\tif (request.fragment && !parsed.fragment) {\r\n\t\t\t\t\tobj.fragment = request.fragment;\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed && resolveContext.log) {\r\n\t\t\t\t\tif (parsed.module) resolveContext.log(\"Parsed request is a module\");\r\n\t\t\t\t\tif (parsed.directory)\r\n\t\t\t\t\t\tresolveContext.log(\"Parsed request is a directory\");\r\n\t\t\t\t}\r\n\t\t\t\t// There is an edge-case where a request with # can be a path or a fragment -> try both\r\n\t\t\t\tif (obj.request && !obj.query && obj.fragment) {\r\n\t\t\t\t\tconst directory = obj.fragment.endsWith(\"/\");\r\n\t\t\t\t\tconst alternative = {\r\n\t\t\t\t\t\t...obj,\r\n\t\t\t\t\t\tdirectory,\r\n\t\t\t\t\t\trequest:\r\n\t\t\t\t\t\t\tobj.request +\r\n\t\t\t\t\t\t\t(obj.directory ? \"/\" : \"\") +\r\n\t\t\t\t\t\t\t(directory ? obj.fragment.slice(0, -1) : obj.fragment),\r\n\t\t\t\t\t\tfragment: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t\talternative,\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t\t(err, result) => {\r\n\t\t\t\t\t\t\tif (err) return callback(err);\r\n\t\t\t\t\t\t\tif (result) return callback(null, result);\r\n\t\t\t\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,WAAW,CAAC;EAClC;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,cAAc,EAAEC,MAAM,EAAE;IAC3C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC,CACpBO,QAAQ,CAAC,aAAa,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MAC/D,MAAMC,MAAM,GAAGP,QAAQ,CAACQ,KAAK,EAAC,qBAAuBJ,OAAO,CAACA,OAAO,CAAE;MACtE,MAAMK,GAAG,GAAG;QAAE,GAAGL,OAAO;QAAE,GAAGG,MAAM;QAAE,GAAG,IAAI,CAACV;MAAe,CAAC;MAC7D,IAAIO,OAAO,CAACM,KAAK,IAAI,CAACH,MAAM,CAACG,KAAK,EAAE;QACnCD,GAAG,CAACC,KAAK,GAAGN,OAAO,CAACM,KAAK;MAC1B;MACA,IAAIN,OAAO,CAACO,QAAQ,IAAI,CAACJ,MAAM,CAACI,QAAQ,EAAE;QACzCF,GAAG,CAACE,QAAQ,GAAGP,OAAO,CAACO,QAAQ;MAChC;MACA,IAAIJ,MAAM,IAAIF,cAAc,CAACO,GAAG,EAAE;QACjC,IAAIL,MAAM,CAACf,MAAM,EAAEa,cAAc,CAACO,GAAG,CAAC,4BAA4B,CAAC;QACnE,IAAIL,MAAM,CAACM,SAAS,EACnBR,cAAc,CAACO,GAAG,CAAC,+BAA+B,CAAC;MACrD;MACA;MACA,IAAIH,GAAG,CAACL,OAAO,IAAI,CAACK,GAAG,CAACC,KAAK,IAAID,GAAG,CAACE,QAAQ,EAAE;QAC9C,MAAME,SAAS,GAAGJ,GAAG,CAACE,QAAQ,CAACG,QAAQ,CAAC,GAAG,CAAC;QAC5C,MAAMC,WAAW,GAAG;UACnB,GAAGN,GAAG;UACNI,SAAS;UACTT,OAAO,EACNK,GAAG,CAACL,OAAO,IACVK,GAAG,CAACI,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC,IACzBA,SAAS,GAAGJ,GAAG,CAACE,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGP,GAAG,CAACE,QAAQ,CAAC;UACvDA,QAAQ,EAAE;QACX,CAAC;QACDX,QAAQ,CAACiB,SAAS,CACjBnB,MAAM,EACNiB,WAAW,EACX,IAAI,EACJV,cAAc,EACd,CAACa,GAAG,EAAEC,MAAM,KAAK;UAChB,IAAID,GAAG,EAAE,OAAOZ,QAAQ,CAACY,GAAG,CAAC;UAC7B,IAAIC,MAAM,EAAE,OAAOb,QAAQ,CAAC,IAAI,EAAEa,MAAM,CAAC;UACzCnB,QAAQ,CAACiB,SAAS,CAACnB,MAAM,EAAEW,GAAG,EAAE,IAAI,EAAEJ,cAAc,EAAEC,QAAQ,CAAC;QAChE,CAAC,CACD;QACD;MACD;MACAN,QAAQ,CAACiB,SAAS,CAACnB,MAAM,EAAEW,GAAG,EAAE,IAAI,EAAEJ,cAAc,EAAEC,QAAQ,CAAC;IAChE,CAAC,CAAC;EACJ;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
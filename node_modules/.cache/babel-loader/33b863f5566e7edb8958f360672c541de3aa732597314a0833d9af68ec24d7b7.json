{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nconst namespaceStartCharCode = \"@\".charCodeAt(0);\nmodule.exports = class JoinRequestPartPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {string | ResolveStepHook} target target\r\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"JoinRequestPartPlugin\", (request, resolveContext, callback) => {\n      const req = request.request || \"\";\n      let i = req.indexOf(\"/\", 3);\n      if (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {\n        i = req.indexOf(\"/\", i + 1);\n      }\n      let moduleName, remainingRequest, fullySpecified;\n      if (i < 0) {\n        moduleName = req;\n        remainingRequest = \".\";\n        fullySpecified = false;\n      } else {\n        moduleName = req.slice(0, i);\n        remainingRequest = \".\" + req.slice(i);\n        fullySpecified = request.fullySpecified;\n      }\n      const obj = {\n        ...request,\n        path: resolver.join(request.path, moduleName),\n        relativePath: request.relativePath && resolver.join(request.relativePath, moduleName),\n        request: remainingRequest,\n        fullySpecified\n      };\n      resolver.doResolve(target, obj, null, resolveContext, callback);\n    });\n  }\n};","map":{"version":3,"names":["namespaceStartCharCode","charCodeAt","module","exports","JoinRequestPartPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","i","indexOf","moduleName","remainingRequest","fullySpecified","slice","obj","path","join","relativePath","doResolve"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/enhanced-resolve/lib/JoinRequestPartPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n\r\nconst namespaceStartCharCode = \"@\".charCodeAt(0);\r\n\r\nmodule.exports = class JoinRequestPartPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {string | ResolveStepHook} target target\r\n\t */\r\n\tconstructor(source, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\r\n\t\t\t\t\"JoinRequestPartPlugin\",\r\n\t\t\t\t(request, resolveContext, callback) => {\r\n\t\t\t\t\tconst req = request.request || \"\";\r\n\t\t\t\t\tlet i = req.indexOf(\"/\", 3);\r\n\r\n\t\t\t\t\tif (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {\r\n\t\t\t\t\t\ti = req.indexOf(\"/\", i + 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet moduleName, remainingRequest, fullySpecified;\r\n\t\t\t\t\tif (i < 0) {\r\n\t\t\t\t\t\tmoduleName = req;\r\n\t\t\t\t\t\tremainingRequest = \".\";\r\n\t\t\t\t\t\tfullySpecified = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoduleName = req.slice(0, i);\r\n\t\t\t\t\t\tremainingRequest = \".\" + req.slice(i);\r\n\t\t\t\t\t\tfullySpecified = request.fullySpecified;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t...request,\r\n\t\t\t\t\t\tpath: resolver.join(request.path, moduleName),\r\n\t\t\t\t\t\trelativePath:\r\n\t\t\t\t\t\t\trequest.relativePath &&\r\n\t\t\t\t\t\t\tresolver.join(request.relativePath, moduleName),\r\n\t\t\t\t\t\trequest: remainingRequest,\r\n\t\t\t\t\t\tfullySpecified\r\n\t\t\t\t\t};\r\n\t\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEA,MAAMA,sBAAsB,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;AAEhDC,MAAM,CAACC,OAAO,GAAG,MAAMC,qBAAqB,CAAC;EAC5C;AACD;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACL,MAAM,CAAC,CACpBM,QAAQ,CACR,uBAAuB,EACvB,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACtC,MAAMC,GAAG,GAAGH,OAAO,CAACA,OAAO,IAAI,EAAE;MACjC,IAAII,CAAC,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;MAE3B,IAAID,CAAC,IAAI,CAAC,IAAID,GAAG,CAACf,UAAU,CAAC,CAAC,CAAC,KAAKD,sBAAsB,EAAE;QAC3DiB,CAAC,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,EAAED,CAAC,GAAG,CAAC,CAAC;MAC5B;MAEA,IAAIE,UAAU,EAAEC,gBAAgB,EAAEC,cAAc;MAChD,IAAIJ,CAAC,GAAG,CAAC,EAAE;QACVE,UAAU,GAAGH,GAAG;QAChBI,gBAAgB,GAAG,GAAG;QACtBC,cAAc,GAAG,KAAK;MACvB,CAAC,MAAM;QACNF,UAAU,GAAGH,GAAG,CAACM,KAAK,CAAC,CAAC,EAAEL,CAAC,CAAC;QAC5BG,gBAAgB,GAAG,GAAG,GAAGJ,GAAG,CAACM,KAAK,CAACL,CAAC,CAAC;QACrCI,cAAc,GAAGR,OAAO,CAACQ,cAAc;MACxC;MACA,MAAME,GAAG,GAAG;QACX,GAAGV,OAAO;QACVW,IAAI,EAAEf,QAAQ,CAACgB,IAAI,CAACZ,OAAO,CAACW,IAAI,EAAEL,UAAU,CAAC;QAC7CO,YAAY,EACXb,OAAO,CAACa,YAAY,IACpBjB,QAAQ,CAACgB,IAAI,CAACZ,OAAO,CAACa,YAAY,EAAEP,UAAU,CAAC;QAChDN,OAAO,EAAEO,gBAAgB;QACzBC;MACD,CAAC;MACDZ,QAAQ,CAACkB,SAAS,CAACpB,MAAM,EAAEgB,GAAG,EAAE,IAAI,EAAET,cAAc,EAAEC,QAAQ,CAAC;IAChE,CAAC,CACD;EACH;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
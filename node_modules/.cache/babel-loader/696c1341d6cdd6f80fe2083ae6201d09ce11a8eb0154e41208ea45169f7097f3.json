{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Maël Nison @arcanis\r\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/**\r\n * @typedef {Object} PnpApiImpl\r\n * @property {function(string, string, object): string} resolveToUnqualified\r\n */\nmodule.exports = class PnpPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {PnpApiImpl} pnpApi pnpApi\r\n   * @param {string | ResolveStepHook} target target\r\n   */\n  constructor(source, pnpApi, target) {\n    this.source = source;\n    this.pnpApi = pnpApi;\n    this.target = target;\n  }\n\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n      const req = request.request;\n      if (!req) return callback();\n\n      // The trailing slash indicates to PnP that this value is a folder rather than a file\n      const issuer = `${request.path}/`;\n      const packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\n      if (!packageMatch) return callback();\n      const packageName = packageMatch[0];\n      const innerRequest = `.${req.slice(packageName.length)}`;\n      let resolution;\n      let apiResolution;\n      try {\n        resolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\n          considerBuiltins: false\n        });\n        if (resolveContext.fileDependencies) {\n          apiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n            considerBuiltins: false\n          });\n        }\n      } catch (error) {\n        if (error.code === \"MODULE_NOT_FOUND\" && error.pnpCode === \"UNDECLARED_DEPENDENCY\") {\n          // This is not a PnP managed dependency.\n          // Try to continue resolving with our alternatives\n          if (resolveContext.log) {\n            resolveContext.log(`request is not managed by the pnpapi`);\n            for (const line of error.message.split(\"\\n\").filter(Boolean)) resolveContext.log(`  ${line}`);\n          }\n          return callback();\n        }\n        return callback(error);\n      }\n      if (resolution === packageName) return callback();\n      if (apiResolution && resolveContext.fileDependencies) {\n        resolveContext.fileDependencies.add(apiResolution);\n      }\n      const obj = {\n        ...request,\n        path: resolution,\n        request: innerRequest,\n        ignoreSymlinks: true,\n        fullySpecified: request.fullySpecified && innerRequest !== \".\"\n      };\n      resolver.doResolve(target, obj, `resolved by pnp to ${resolution}`, resolveContext, (err, result) => {\n        if (err) return callback(err);\n        if (result) return callback(null, result);\n        // Skip alternatives\n        return callback(null, null);\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","PnpPlugin","constructor","source","pnpApi","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","issuer","path","packageMatch","exec","packageName","innerRequest","slice","length","resolution","apiResolution","resolveToUnqualified","considerBuiltins","fileDependencies","error","code","pnpCode","log","line","message","split","filter","Boolean","add","obj","ignoreSymlinks","fullySpecified","doResolve","err","result"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/enhanced-resolve/lib/PnpPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Maël Nison @arcanis\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n/**\r\n * @typedef {Object} PnpApiImpl\r\n * @property {function(string, string, object): string} resolveToUnqualified\r\n */\r\n\r\nmodule.exports = class PnpPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {PnpApiImpl} pnpApi pnpApi\r\n\t * @param {string | ResolveStepHook} target target\r\n\t */\r\n\tconstructor(source, pnpApi, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.pnpApi = pnpApi;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\tconst req = request.request;\r\n\t\t\t\tif (!req) return callback();\r\n\r\n\t\t\t\t// The trailing slash indicates to PnP that this value is a folder rather than a file\r\n\t\t\t\tconst issuer = `${request.path}/`;\r\n\r\n\t\t\t\tconst packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\r\n\t\t\t\tif (!packageMatch) return callback();\r\n\r\n\t\t\t\tconst packageName = packageMatch[0];\r\n\t\t\t\tconst innerRequest = `.${req.slice(packageName.length)}`;\r\n\r\n\t\t\t\tlet resolution;\r\n\t\t\t\tlet apiResolution;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\r\n\t\t\t\t\t\tconsiderBuiltins: false\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (resolveContext.fileDependencies) {\r\n\t\t\t\t\t\tapiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\r\n\t\t\t\t\t\t\tconsiderBuiltins: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\terror.code === \"MODULE_NOT_FOUND\" &&\r\n\t\t\t\t\t\terror.pnpCode === \"UNDECLARED_DEPENDENCY\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// This is not a PnP managed dependency.\r\n\t\t\t\t\t\t// Try to continue resolving with our alternatives\r\n\t\t\t\t\t\tif (resolveContext.log) {\r\n\t\t\t\t\t\t\tresolveContext.log(`request is not managed by the pnpapi`);\r\n\t\t\t\t\t\t\tfor (const line of error.message.split(\"\\n\").filter(Boolean))\r\n\t\t\t\t\t\t\t\tresolveContext.log(`  ${line}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn callback();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn callback(error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (resolution === packageName) return callback();\r\n\r\n\t\t\t\tif (apiResolution && resolveContext.fileDependencies) {\r\n\t\t\t\t\tresolveContext.fileDependencies.add(apiResolution);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst obj = {\r\n\t\t\t\t\t...request,\r\n\t\t\t\t\tpath: resolution,\r\n\t\t\t\t\trequest: innerRequest,\r\n\t\t\t\t\tignoreSymlinks: true,\r\n\t\t\t\t\tfullySpecified: request.fullySpecified && innerRequest !== \".\"\r\n\t\t\t\t};\r\n\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\ttarget,\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\t`resolved by pnp to ${resolution}`,\r\n\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t(err, result) => {\r\n\t\t\t\t\t\tif (err) return callback(err);\r\n\t\t\t\t\t\tif (result) return callback(null, result);\r\n\t\t\t\t\t\t// Skip alternatives\r\n\t\t\t\t\t\treturn callback(null, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
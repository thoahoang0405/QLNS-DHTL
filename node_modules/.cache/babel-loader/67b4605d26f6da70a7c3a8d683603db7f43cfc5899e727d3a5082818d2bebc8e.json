{"ast":null,"code":"// Copyright 2012 The Obvious Corporation.\n\n/*\r\n * bufs: Buffer utilities.\r\n */\n\n/*\r\n * Module variables\r\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\r\n * The int value consisting just of a 1 in bit #32 (that is, one more\r\n * than the maximum 32-bit unsigned value).\r\n */\n\nvar BIT_32 = 0x100000000;\n/**\r\n * The int value consisting just of a 1 in bit #64 (that is, one more\r\n * than the maximum 64-bit unsigned value).\r\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\r\n * Helper functions\r\n */\n\n/**\r\n * Masks off all but the lowest bit set of the given number.\r\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\r\n * Gets whether trying to add the second number to the first is lossy\r\n * (inexact). The first number is meant to be an accumulated result.\r\n */\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n  if (added === accum) {\n    return true;\n  }\n  if (added - lowBit !== accum) {\n    return true;\n  }\n  return false;\n}\n/*\r\n * Exported functions\r\n */\n\n/**\r\n * Allocates a buffer of the given length, which is initialized\r\n * with all zeroes. This returns a buffer from the pool if it is\r\n * available, or a freshly-allocated buffer if not.\r\n */\n\nexport function alloc(length) {\n  var result = bufPool[length];\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n  result.fill(0);\n  return result;\n}\n/**\r\n * Releases a buffer back to the pool.\r\n */\n\nexport function free(buffer) {\n  var length = buffer.length;\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\r\n * Resizes a buffer, returning a new buffer. Returns the argument if\r\n * the length wouldn't actually change. This function is only safe to\r\n * use if the given buffer was allocated within this module (since\r\n * otherwise the buffer might possibly be shared externally).\r\n */\n\nexport function resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\r\n * Reads an arbitrary signed int from a buffer.\r\n */\n\nexport function readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n      result += one;\n    }\n  }\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\r\n * Reads an arbitrary unsigned int from a buffer.\r\n */\n\nexport function readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n      result += one;\n    }\n  }\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\r\n * Writes a little-endian 64-bit signed int into a buffer.\r\n */\n\nexport function writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n  if (value < 0) {\n    value += BIT_64;\n  }\n  writeUInt64(value, buffer);\n}\n/**\r\n * Writes a little-endian 64-bit unsigned int into a buffer.\r\n */\n\nexport function writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}","map":{"version":3,"names":["bufPool","TEMP_BUF_MAXIMUM_LENGTH","MIN_EXACT_INT64","MAX_EXACT_INT64","MAX_EXACT_UINT64","BIT_32","BIT_64","lowestBit","num","isLossyToAdd","accum","lowBit","added","alloc","length","result","undefined","Buffer","fill","free","buffer","resize","newBuf","copy","readInt","positive","lossy","i","_i","one","value","readUInt","_i2","writeInt64","Error","writeUInt64","lowWord","highWord","Math","floor","writeUInt32LE"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/@webassemblyjs/leb128/esm/bufs.js"],"sourcesContent":["// Copyright 2012 The Obvious Corporation.\r\n\r\n/*\r\n * bufs: Buffer utilities.\r\n */\r\n\r\n/*\r\n * Module variables\r\n */\r\n\r\n/** Pool of buffers, where `bufPool[x].length === x`. */\r\nvar bufPool = [];\r\n/** Maximum length of kept temporary buffers. */\r\n\r\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\r\n/** Minimum exactly-representable 64-bit int. */\r\n\r\nvar MIN_EXACT_INT64 = -0x8000000000000000;\r\n/** Maximum exactly-representable 64-bit int. */\r\n\r\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\r\n/** Maximum exactly-representable 64-bit uint. */\r\n\r\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\r\n/**\r\n * The int value consisting just of a 1 in bit #32 (that is, one more\r\n * than the maximum 32-bit unsigned value).\r\n */\r\n\r\nvar BIT_32 = 0x100000000;\r\n/**\r\n * The int value consisting just of a 1 in bit #64 (that is, one more\r\n * than the maximum 64-bit unsigned value).\r\n */\r\n\r\nvar BIT_64 = 0x10000000000000000;\r\n/*\r\n * Helper functions\r\n */\r\n\r\n/**\r\n * Masks off all but the lowest bit set of the given number.\r\n */\r\n\r\nfunction lowestBit(num) {\r\n  return num & -num;\r\n}\r\n/**\r\n * Gets whether trying to add the second number to the first is lossy\r\n * (inexact). The first number is meant to be an accumulated result.\r\n */\r\n\r\n\r\nfunction isLossyToAdd(accum, num) {\r\n  if (num === 0) {\r\n    return false;\r\n  }\r\n\r\n  var lowBit = lowestBit(num);\r\n  var added = accum + lowBit;\r\n\r\n  if (added === accum) {\r\n    return true;\r\n  }\r\n\r\n  if (added - lowBit !== accum) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n/*\r\n * Exported functions\r\n */\r\n\r\n/**\r\n * Allocates a buffer of the given length, which is initialized\r\n * with all zeroes. This returns a buffer from the pool if it is\r\n * available, or a freshly-allocated buffer if not.\r\n */\r\n\r\n\r\nexport function alloc(length) {\r\n  var result = bufPool[length];\r\n\r\n  if (result) {\r\n    bufPool[length] = undefined;\r\n  } else {\r\n    result = new Buffer(length);\r\n  }\r\n\r\n  result.fill(0);\r\n  return result;\r\n}\r\n/**\r\n * Releases a buffer back to the pool.\r\n */\r\n\r\nexport function free(buffer) {\r\n  var length = buffer.length;\r\n\r\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\r\n    bufPool[length] = buffer;\r\n  }\r\n}\r\n/**\r\n * Resizes a buffer, returning a new buffer. Returns the argument if\r\n * the length wouldn't actually change. This function is only safe to\r\n * use if the given buffer was allocated within this module (since\r\n * otherwise the buffer might possibly be shared externally).\r\n */\r\n\r\nexport function resize(buffer, length) {\r\n  if (length === buffer.length) {\r\n    return buffer;\r\n  }\r\n\r\n  var newBuf = alloc(length);\r\n  buffer.copy(newBuf);\r\n  free(buffer);\r\n  return newBuf;\r\n}\r\n/**\r\n * Reads an arbitrary signed int from a buffer.\r\n */\r\n\r\nexport function readInt(buffer) {\r\n  var length = buffer.length;\r\n  var positive = buffer[length - 1] < 0x80;\r\n  var result = positive ? 0 : -1;\r\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\r\n  // working if the result won't fit in a 32-bit int.\r\n\r\n  if (length < 7) {\r\n    // Common case which can't possibly be lossy (because the result has\r\n    // no more than 48 bits, and loss only happens with 54 or more).\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      result = result * 0x100 + buffer[i];\r\n    }\r\n  } else {\r\n    for (var _i = length - 1; _i >= 0; _i--) {\r\n      var one = buffer[_i];\r\n      result *= 0x100;\r\n\r\n      if (isLossyToAdd(result, one)) {\r\n        lossy = true;\r\n      }\r\n\r\n      result += one;\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: result,\r\n    lossy: lossy\r\n  };\r\n}\r\n/**\r\n * Reads an arbitrary unsigned int from a buffer.\r\n */\r\n\r\nexport function readUInt(buffer) {\r\n  var length = buffer.length;\r\n  var result = 0;\r\n  var lossy = false; // Note: See above in re bit manipulation.\r\n\r\n  if (length < 7) {\r\n    // Common case which can't possibly be lossy (see above).\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      result = result * 0x100 + buffer[i];\r\n    }\r\n  } else {\r\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\r\n      var one = buffer[_i2];\r\n      result *= 0x100;\r\n\r\n      if (isLossyToAdd(result, one)) {\r\n        lossy = true;\r\n      }\r\n\r\n      result += one;\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: result,\r\n    lossy: lossy\r\n  };\r\n}\r\n/**\r\n * Writes a little-endian 64-bit signed int into a buffer.\r\n */\r\n\r\nexport function writeInt64(value, buffer) {\r\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\r\n    throw new Error(\"Value out of range.\");\r\n  }\r\n\r\n  if (value < 0) {\r\n    value += BIT_64;\r\n  }\r\n\r\n  writeUInt64(value, buffer);\r\n}\r\n/**\r\n * Writes a little-endian 64-bit unsigned int into a buffer.\r\n */\r\n\r\nexport function writeUInt64(value, buffer) {\r\n  if (value < 0 || value > MAX_EXACT_UINT64) {\r\n    throw new Error(\"Value out of range.\");\r\n  }\r\n\r\n  var lowWord = value % BIT_32;\r\n  var highWord = Math.floor(value / BIT_32);\r\n  buffer.writeUInt32LE(lowWord, 0);\r\n  buffer.writeUInt32LE(highWord, 4);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import Long from \"@xtuc/long\";\nimport parseHexFloat from \"@webassemblyjs/floating-point-hex-parser\";\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nexport function parse32F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\n  }\n  return parseFloat(sourceString);\n}\nexport function parse64F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\n  }\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n  return parseFloat(sourceString);\n}\nexport function parse32I(sourceString) {\n  var value = 0;\n  if (isHexLiteral(sourceString)) {\n    value = ~~parseInt(sourceString, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    value = parseInt(sourceString, 10);\n  }\n  return value;\n}\nexport function parseU32(sourceString) {\n  var value = parse32I(sourceString);\n  if (value < 0) {\n    throw new CompileError(\"Illegal value for u32: \" + sourceString);\n  }\n  return value;\n}\nexport function parse64I(sourceString) {\n  var long;\n  if (isHexLiteral(sourceString)) {\n    long = Long.fromString(sourceString, false, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    long = Long.fromString(sourceString);\n  }\n  return {\n    high: long.high,\n    low: long.low\n  };\n}\nvar NAN_WORD = /^\\+?-?nan/;\nvar INF_WORD = /^\\+?-?inf/;\nexport function isInfLiteral(sourceString) {\n  return INF_WORD.test(sourceString.toLowerCase());\n}\nexport function isNanLiteral(sourceString) {\n  return NAN_WORD.test(sourceString.toLowerCase());\n}\nfunction isDecimalExponentLiteral(sourceString) {\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\n}\nfunction isHexLiteral(sourceString) {\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\n}","map":{"version":3,"names":["Long","parseHexFloat","CompileError","parse32F","sourceString","isHexLiteral","isInfLiteral","isNanLiteral","includes","parseInt","substring","indexOf","parseFloat","parse64F","parse32I","value","isDecimalExponentLiteral","Error","parseU32","parse64I","long","fromString","high","low","NAN_WORD","INF_WORD","test","toLowerCase","toUpperCase"],"sources":["D:/dhtl/ptda/UI/QLNS-DHTL/node_modules/@webassemblyjs/helper-numbers/esm/index.js"],"sourcesContent":["import Long from \"@xtuc/long\";\r\nimport parseHexFloat from \"@webassemblyjs/floating-point-hex-parser\";\r\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\r\nexport function parse32F(sourceString) {\r\n  if (isHexLiteral(sourceString)) {\r\n    return parseHexFloat(sourceString);\r\n  }\r\n\r\n  if (isInfLiteral(sourceString)) {\r\n    return sourceString[0] === \"-\" ? -1 : 1;\r\n  }\r\n\r\n  if (isNanLiteral(sourceString)) {\r\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\r\n  }\r\n\r\n  return parseFloat(sourceString);\r\n}\r\nexport function parse64F(sourceString) {\r\n  if (isHexLiteral(sourceString)) {\r\n    return parseHexFloat(sourceString);\r\n  }\r\n\r\n  if (isInfLiteral(sourceString)) {\r\n    return sourceString[0] === \"-\" ? -1 : 1;\r\n  }\r\n\r\n  if (isNanLiteral(sourceString)) {\r\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\r\n  }\r\n\r\n  if (isHexLiteral(sourceString)) {\r\n    return parseHexFloat(sourceString);\r\n  }\r\n\r\n  return parseFloat(sourceString);\r\n}\r\nexport function parse32I(sourceString) {\r\n  var value = 0;\r\n\r\n  if (isHexLiteral(sourceString)) {\r\n    value = ~~parseInt(sourceString, 16);\r\n  } else if (isDecimalExponentLiteral(sourceString)) {\r\n    throw new Error(\"This number literal format is yet to be implemented.\");\r\n  } else {\r\n    value = parseInt(sourceString, 10);\r\n  }\r\n\r\n  return value;\r\n}\r\nexport function parseU32(sourceString) {\r\n  var value = parse32I(sourceString);\r\n\r\n  if (value < 0) {\r\n    throw new CompileError(\"Illegal value for u32: \" + sourceString);\r\n  }\r\n\r\n  return value;\r\n}\r\nexport function parse64I(sourceString) {\r\n  var long;\r\n\r\n  if (isHexLiteral(sourceString)) {\r\n    long = Long.fromString(sourceString, false, 16);\r\n  } else if (isDecimalExponentLiteral(sourceString)) {\r\n    throw new Error(\"This number literal format is yet to be implemented.\");\r\n  } else {\r\n    long = Long.fromString(sourceString);\r\n  }\r\n\r\n  return {\r\n    high: long.high,\r\n    low: long.low\r\n  };\r\n}\r\nvar NAN_WORD = /^\\+?-?nan/;\r\nvar INF_WORD = /^\\+?-?inf/;\r\nexport function isInfLiteral(sourceString) {\r\n  return INF_WORD.test(sourceString.toLowerCase());\r\n}\r\nexport function isNanLiteral(sourceString) {\r\n  return NAN_WORD.test(sourceString.toLowerCase());\r\n}\r\n\r\nfunction isDecimalExponentLiteral(sourceString) {\r\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\r\n}\r\n\r\nfunction isHexLiteral(sourceString) {\r\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}